# Starter pipeline
- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      steps:
      - task: CopyFiles@2
        displayName: 'Copy Files to: $(Build.ArtifactStagingDirectory)'
        inputs:
          Contents: |
            ConsoleApplication1\**\bin\**\!(*.pdb|*.config)
            !ConsoleApplication1\**\ClassLibrary*\**
            ConsoleApplication1\readme.txt
          TargetFolder: '$(Build.ArtifactStagingDirectory)'
      
      
      
      steps:
      - task: CopyFiles@2
        displayName: 'Copy Files to: $(Build.ArtifactStagingDirectory)'
        inputs:
          SourceFolder: '$(Build.SourcesDirectory)'
          Contents: |
            **/*
            !.git/**/*
          TargetFolder: '$(Build.ArtifactStagingDirectory)'
      
      
      # Look for a 0.0.0.0 pattern in the build number.
      # If found use it to version the assemblies.
      #
      # For example, if the 'Build number format' build pipeline parameter 
      # $(BuildDefinitionName)_$(Year:yyyy).$(Month).$(DayOfMonth)$(Rev:.r)
      # then your build numbers come out like this:
      # "Build HelloWorld_2013.07.19.1"
      # This script would then apply version 2013.07.19.1 to your assemblies.
      	
      # Enable -Verbose option
      [CmdletBinding()]
      	
      # Regular expression pattern to find the version in the build number 
      # and then apply it to the assemblies
      $VersionRegex = "\d+\.\d+\.\d+\.\d+"
      	
      # If this script is not running on a build server, remind user to 
      # set environment variables so that this script can be debugged
      if(-not ($Env:BUILD_SOURCESDIRECTORY -and $Env:BUILD_BUILDNUMBER))
      {
      	Write-Error "You must set the following environment variables"
      	Write-Error "to test this script interactively."
      	Write-Host '$Env:BUILD_SOURCESDIRECTORY:'
      	Write-Host '$Env:BUILD_SOURCESDIRECTORY = "..\www\inetpub\"'
      	Write-Host '$Env:BUILD_BUILDNUMBER - Version:'
      	Write-Host '$Env:BUILD_BUILDNUMBER = "0.001"'
      	exit 1
      }
      	
      # Make sure path to source code directory is available
      if (-not $Env:BUILD_SOURCESDIRECTORY)
      {
      	Write-Error ("BUILD_SOURCESDIRECTORY environment variable is missing.")
      	exit 1
      }
      elseif (-not (Test-Path $Env:BUILD_SOURCESDIRECTORY))
      {
      	Write-Error "BUILD_SOURCESDIRECTORY does not exist: $Env:BUILD_SOURCESDIRECTORY"
      	exit 1
      }
      Write-Verbose "BUILD_SOURCESDIRECTORY: $Env:BUILD_SOURCESDIRECTORY"
      	
      # Make sure there is a build number
      if (-not $Env:BUILD_BUILDNUMBER)
      {
      	Write-Error ("BUILD_BUILDNUMBER environment variable is missing.")
      	exit 1
      }
      Write-Verbose "BUILD_BUILDNUMBER: $Env:BUILD_BUILDNUMBER"
      	
      # Get and validate the version data
      $VersionData = [regex]::matches($Env:BUILD_BUILDNUMBER,$VersionRegex)
      switch($VersionData.Count)
      {
         0		
            { 
               Write-Error "Could not find version number data in BUILD_BUILDNUMBER."
               exit 1
            }
         1 {}
         default 
            { 
               Write-Warning "Found more than instance of version data in BUILD_BUILDNUMBER." 
               Write-Warning "Will assume first instance is version."
            }
      }
      $NewVersion = $VersionData[0]
      Write-Verbose "Version: $NewVersion"
      	
      # Apply the version to the assembly property files
      $files = gci $Env:BUILD_SOURCESDIRECTORY -recurse -include "*Properties*","My Project" | 
      	?{ $_.PSIsContainer } | 
      	foreach { gci -Path $_.FullName -Recurse -include AssemblyInfo.* }
      if($files)
      {
      	Write-Verbose "Will apply $NewVersion to $($files.count) files."
      	
      	foreach ($file in $files) {
      		$filecontent = Get-Content($file)
      		attrib $file -r
      		$filecontent -replace $VersionRegex, $NewVersion | Out-File $file
      		Write-Verbose "$file.FullName - version applied"
      	}
      }
      else
      {
      	Write-Warning "Found no files."
      }
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

steps:
- task: CopyFiles@2
  displayName: 'Copy Files to: $(Build.ArtifactStagingDirectory)'
  inputs:
    SourceFolder: '$(Build.SourcesDirectory)'
    Contents: |
      **/*
      !.git/**/*
    TargetFolder: '$(Build.ArtifactStagingDirectory)'

